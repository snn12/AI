import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.preprocessing import MinMaxScaler

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, Dense, Flatten
from tensorflow.keras.metrics import MeanSquaredError, MeanAbsoluteError

# Load dataset
url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv'
data = pd.read_csv(url, usecols=[1])
data.head()

# Data preprocessing
data = data.values.astype(float)
scaler = MinMaxScaler(feature_range=(0,1))
data = scaler.fit_transform(data)

def create_dataset(dataset, look_back=1):
    X, y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset[i:(i + look_back), 0]
        X.append(a)
        y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(y)

look_back = 10
X, y = create_dataset(data, look_back)

X = np.reshape(X, (X.shape[0], X.shape[1], 1))

train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Build CNN model
model = Sequential()

# 1D Convolutional layer
model.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(look_back, 1)))

# Flatten the output before feeding into Dense layers
model.add(Flatten())

# Fully connected Dense layers
model.add(Dense(30, activation='relu'))
model.add(Dense(25, activation='relu'))
model.add(Dense(10, activation='relu'))

# Output layer
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Train the model
history = model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test))

# Plot training & validation loss
plt.figure(figsize=(12,6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Predict using the model
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

# Inverse transform the predictions and true values to original scale
train_predict = scaler.inverse_transform(train_predict)
y_train = scaler.inverse_transform(y_train.reshape(-1, 1))

test_predict = scaler.inverse_transform(test_predict)
y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

# Plot true values vs predictions
plt.figure(figsize=(12,6))
plt.plot(scaler.inverse_transform(data), label='True Values')

train_plot = np.empty_like(data)
train_plot[:, :] = np.nan
train_plot[look_back:len(train_predict) + look_back, :] = train_predict

test_plot = np.empty_like(data)
test_plot[:, :] = np.nan
test_plot[len(train_predict) + (look_back*2) + 1:len(data) - 1, :] = test_predict

plt.plot(train_plot, label='Train Predict')
plt.plot(test_plot, label='Test Predict')

plt.title('True vs Predicted Values')
plt.xlabel('Time Steps')
plt.ylabel('Min Temp.')
plt.legend()
plt.show()

# Forecast next value
last_sequence = data[-look_back:]
last_sequence = np.reshape(last_sequence, (1, look_back, 1))
next_value = model.predict(last_sequence)
next_value = scaler.inverse_transform(next_value)

print(f'Next predicted value: {next_value[0][0]}')

