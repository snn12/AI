import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.preprocessing import MinMaxScaler

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.metrics import MeanSquaredError, MeanAbsoluteError

url  'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv'
data = pd.read_csv(url, usecols=[1])
data.head()

data = data.values.astype(float)
scaler = MinMaxScaler(feature_range=(0,1))
data = scaler.fit_transform(data)

def create_dataset(dataset, look_back=1):
    X, y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset[i:(i + look_back), 0]
        X.append(a)
        y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(y)

look_back = 10
X, y = create_dataset(data, look_back)

X = np.reshape(X, (X.shape[0], X.shape[1], 1))

train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

model = Sequential()

model.add(LSTM(10, input_shape=(look_back, 1), activation = 'relu'))

model.add(Dense(30))
model.add(Dense(25))
model.add(Dense(10))

model.add(Dense(1))

model.compile(optimizer = 'adam', loss='mse')

history = model.fit(X_train, y_train, epochs = 50, validation_data=(X_test, y_test))

plt.figure(figsize=(12,6))

plt.plot(history.history['loss'], label = ' Training Loss')
plt.plot(history.history['val_loss'], label = ' Validation Loss')

plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')

plt.legend()
plt.show()

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

 
test_predict = scaler.inverse_transform(test_predict)
y_test = scaler.inverse_transform(y_test)


train_predict = scaler.inverse_transform(train_predict)
y_train = scaler.inverse_transform(y_train)


train_predict = scaler.inverse_transform(train_predict)
y_train = scaler.inverse_transform(y_train)

 
test_predict = scaler.inverse_transform(test_predict)
y_test = scaler.inverse_transform(y_test)


plt.figure(figsize=(12,6))

plt.plot(scaler.inverse_transform(data), label = ' True Values')
train_plot = np.empty_like(data)
train_plot[:,:] = np.nan
train_plot [look_back:len(train_predict) + look_back, :] = train_predict

test_plot = np.empty_like(data)
test_plot [:,:] = np.nan 
test_plot [look_back:len(test_predict) + look_back, :] = test_predict


plt.plot(train_plot, label = 'Train Predict')
plt.plot(test_plot, label = 'Test Predict')

plt.title('True vs Predicted Values')
plt.xlabel('Time Steps')
plt.ylabel('Min Temp.')

plt.legend()
plt.show()



last_sequence = data[-look_back:]
last_sequence  = np.reshape(last_sequence, (1, look_back, 1))
next_value = model.predict(last_sequence)
next_value = scaler.inverse_transform(next_value)

print(next_value[0][0])
