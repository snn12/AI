import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.metrics import MeanSquaredError, MeanAbsoluteError

url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/airline-passengers.csv'

data = pd.read_csv(url, usecols = [1])

data.head()
data = data.values.astype(float)

scaler = MinMaxScaler(feature_range=(0,1))
data = scaler.fit_transform(data)
print(data)

def create_dataset(dataset, look_back =1):
    X, y = [], []
    for i in range(len(dataset) - look_back - 1):
        a = dataset[i:(i + look_back), 0 ]
        print(a)
        X.append(a)
        y.append(dataset[i + look_back, 0])
        
    
    return np.array(X), np.array(y)

look_back = 10
X, y = create_dataset(data, look_back)

X = np.reshape(X, (X.shape[0], X.shape[1], 1))

print(X)

train_size = int(len(X) * 0.8)

X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

model = Sequential()

model.add(SimpleRNN(50, input_shape = (look_back, 1), activation = 'relu'))

model.add(Dense(1))

model.compile(optimizer = 'adam', loss='mse')

history = model.fit(X_train, y_train, epochs = 20 , validation_data=(X_test, y_test))
plt.figure(figsize=(12,6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title=('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

print(test_predict)

train_predict = scaler.inverse_transform(train_predict)
y_train = scaler.inverse_transform([y_train])

print(y_train)

test_predict = scaler.inverse_transform(test_predict)
y_test = scaler.inverse_transform([y_test])

plt.figure(figsize=(12,6))
plt.plot(scaler.inverse_transform(data), label ='True Values')
train_plot = np.empty_like(data)
train_plot [:, :] = np.nan 
train_plot [look_back:len(train_predict) + look_back, :] = train_predict 


test_plot = np.empty_like(data)
test_plot [:, :] = np.nan 
test_plot [look_back:len(test_predict) + look_back, :] = test_predict 


plt.plot(train_plot, label = 'Train Predict')
plt.plot(test_plot, label = ' Test Predict')
plt.title('True vs Predicted Values')
plt.xlabel("Time Steps")
plt.ylabel("Number of Passengers")
plt.label()
plt.show()

mse = model.evalute(X_test, y_test, vebose= 0)
print(mse)
