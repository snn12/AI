import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data"

columns = ['Status', 'Month', 'Credit_history', 'Purpose', 'Credit_amount', 'Savings', 'Employment', 'Installment_rate', 'Personal_status', 'Other_parties', 'Residence_since', 'Property_magnitude', 'Age', 'Other_payment_plans', 'Housing', 'Existing_credits', 'Job', 'Num_dependents', 'Own_telephone', 'Foreign_worker', 'Class' ]

data = pd.read_csv(url, delim_whitespace=True, header=None, names=columns)


data.to_csv('german_credit_data.csv', index=False)

data = pd.read_csv('german_credit_data.csv')

X = data.drop('Class',  axis =1)

y= data['Class']

print(X['Status'])

for column in X.columns:
    if  X[column].dtype == type(object):
        le = LabelEncoder()
        X[column] = le.fit_transform(X[column])

print(X)

        
        
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler ()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print(X_train)

y_train = to_categorical(y_train - 1 , num_classes= 2)

y_test = to_categorical(y_test - 1 , num_classes=2)

model = Sequential()
model.add(Dense(16, input_dim = X_train.shape[1] , activation= 'relu'))
model.add(Dense(8, activation= 'relu'))
model.add(Dense(2, activation = 'softmax'))


model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=100, batch_size=10, validation_data=(X_test, y_test))

loss, accuracy = model.evaluate(X_test, y_test)

print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy:.4f}')

# Eğitim ve doğrulama doğruluk değerlerini çiz
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')

# Eğitim ve doğrulama kayıp değerlerini çiz
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')

plt.show()
