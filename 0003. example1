import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder

# Veri setini yükleme
url = "C:/Users/bot/Desktop/AI course/random_cars.csv"
data = pd.read_csv(url)

# Veriyi inceleyin
print(data.head())

# Kategorik veriyi (Body_Style) OneHotEncoding ile dönüştürme
encoder = OneHotEncoder()
body_style_encoded = encoder.fit_transform(data[["Body_Style"]]).toarray()

# OneHotEncoded sütunları veri setine ekleme
encoded_columns = encoder.get_feature_names_out(["Body_Style"])
data = data.join(pd.DataFrame(body_style_encoded, columns=encoded_columns))

# Orijinal Body_Style sütununu kaldırma
data = data.drop("Body_Style", axis=1)

# Özellik ve hedef değişkenlerin belirlenmesi
X = data.drop("Price", axis=1)
y = data["Price"]

# Veri setini eğitim ve test setlerine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression modelini başlatma ve eğitme
model = LinearRegression()
model.fit(X_train, y_train)

# Tahminler yapma
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

mse_train = mean_squared_error(y_train, y_pred_train)
r2_train = r2_score(y_train, y_pred_train)
mse_test = mean_squared_error(y_test, y_pred_test)
r2_test = r2_score(y_test, y_pred_test)

# Metriği gösterme
metrics = {
    "MSE Train": mse_train,
    "R2 Train": r2_train,
    "MSE Test": mse_test,
    "R2 Test": r2_test
}

metrics_df = pd.DataFrame(metrics, index=[0])
print(metrics_df)

# Veriyi ve regresyon doğrusunu çizme (Sadece Motor Büyüklüğü vs Fiyat için örnek)
plt.figure(figsize=(12, 6))

# Eğitim verisi
plt.subplot(1, 2, 1)
plt.scatter(X_train["Engine_Size"], y_train, color='blue', label='Training data')
plt.plot(X_train["Engine_Size"], y_pred_train, color='red', linewidth=2, label='Regression line')

plt.title('Training Data')
plt.xlabel('Engine Size')
plt.ylabel('Price')
plt.legend()

# Test verisi
plt.subplot(1, 2, 2)
plt.scatter(X_test["Engine_Size"], y_test, color='green', label='Testing data')
plt.plot(X_train["Engine_Size"], y_pred_train, color='red', linewidth=2, label='Regression line')

plt.title('Testing Data')
plt.xlabel('Engine Size')
plt.ylabel('Price')
plt.legend()

plt.show()

