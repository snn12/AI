import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

import tensorflow as tf
from keras.models import Sequential
from keras.layers imaport SimpleRNN, Dense
from keras.utils import to_categorical

def generate_data(seq_lenght  = 50 , num_sequences = 1000):
    X = np.random.rand(num_sequences, seq_lenght, 1)
    y = np.sum(X, axis = 1)
    return X, y

X, y = generate_data()

train_size = int(len(X) * 0.8 )
X_train, X_test = X[: train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

print(X_train[0])
print(y_train[0])

print(X_train[0])
print(y_train[0])

model = Sequential()
model.add(SimpleRNN(50, input_shape=(X.shape[1], X.shape[2]), activation = 'relu' ) )
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

history = model.fit(X_train, y_train, epochs = 20, validation_data=(X_test, y_test))

plt.figure(figsize=(12,6))
plt.plot(history.history['loss'], label = 'Training Loss')
plt.plot(history.history['val_loss'], label = 'Validation Loss'),
plt.title('Training and validation loss ')
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

y_pred = model.predict(X_test)

plt.figure(figsize(12,6))
plt.plot(y_test, label = 'True Values')
plt.plot(y_pred
plt.title('Training and validation loss ')
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()
